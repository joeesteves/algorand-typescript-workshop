{
  "version": 3,
  "sources": [
    "/home/joe/myAlgo/algorand-typescript-workshop/projects/personal-bank/smart_contracts/personal_bank/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAmCG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAWG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAWE;;;AAEgB;;AAAA;;AAAoB;;AAA3B;AAAP;AACc;;AAAA;;AAAA;AAAd;AAG2C;;AAAA;;AAAA;AAhBY;AAAA;AAAA;AAAA;AAgBJ;AAAA;;AAEnD;;;AACiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA/B;;AAAA;AAAA;AAAA;AAMoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtC;;AAAA;AAJE;;AAAA;AAAA;;AAAA;AAAA;AApBiD;;;;;;;;AAAA;;AAAA;AAqBjD;AAAA;;AAAA;;AAAA;;;;AAtBqD;AAoCI;;AApCJ;AAoChB;AAAA;AAAA;AACvC;AAAA;AAEe;AAEG;;;;;;AAFH;;;AAIN;;;AAJM;;;AAvCwC;AA+CnC;;AA/CmC;AA+CnB;AAApC;AAAA;AAEA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"depositors\" 0x151f7c75"
    },
    "23": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "28": {
      "op": "pushbytess 0xd822ffef 0x3a395f2b // method \"deposit(pay,string)uint64\", method \"withdraw()uint64\"",
      "defined_out": [
        "Method(deposit(pay,string)uint64)",
        "Method(withdraw()uint64)"
      ],
      "stack_out": [
        "Method(deposit(pay,string)uint64)",
        "Method(withdraw()uint64)"
      ]
    },
    "40": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(deposit(pay,string)uint64)",
        "Method(withdraw()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(deposit(pay,string)uint64)",
        "Method(withdraw()uint64)",
        "tmp%2#0"
      ]
    },
    "43": {
      "op": "match main_deposit_route@3 main_withdraw_route@4",
      "stack_out": []
    },
    "49": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "50": {
      "op": "return",
      "stack_out": []
    },
    "51": {
      "block": "main_withdraw_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "54": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "57": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "58": {
      "callsub": "smart_contracts/personal_bank/contract.algo.ts::PersonalBank.withdraw",
      "op": "callsub withdraw",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "61": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "62": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "63": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "64": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "65": {
      "op": "log",
      "stack_out": []
    },
    "66": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "return",
      "stack_out": []
    },
    "68": {
      "block": "main_deposit_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "70": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "71": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "72": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "74": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "75": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "77": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "78": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "79": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "80": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "82": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "83": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "84": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "85": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ]
    },
    "88": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%9#0"
      ]
    },
    "91": {
      "callsub": "smart_contracts/personal_bank/contract.algo.ts::PersonalBank.deposit",
      "op": "callsub deposit",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "94": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "95": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "97": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "98": {
      "op": "log",
      "stack_out": []
    },
    "99": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "100": {
      "op": "return",
      "stack_out": []
    },
    "101": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "103": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "108": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "109": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "110": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "subroutine": "smart_contracts/personal_bank/contract.algo.ts::PersonalBank.deposit",
      "params": {
        "payTxn#0": "uint64",
        "githubHandle#0": "bytes"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "115": {
      "op": "frame_dig -2",
      "defined_out": [
        "payTxn#0 (copy)"
      ],
      "stack_out": [
        "payTxn#0 (copy)"
      ]
    },
    "117": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "121": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "122": {
      "error": "Receiver must be the contract address",
      "op": "assert // Receiver must be the contract address",
      "stack_out": []
    },
    "123": {
      "op": "frame_dig -2",
      "stack_out": [
        "payTxn#0 (copy)"
      ]
    },
    "125": {
      "op": "gtxns Amount",
      "defined_out": [
        "depositAmount#0"
      ],
      "stack_out": [
        "depositAmount#0"
      ]
    },
    "127": {
      "op": "dup",
      "defined_out": [
        "depositAmount#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "depositAmount#0"
      ]
    },
    "128": {
      "error": "Deposit amount must be greater than zero",
      "op": "assert // Deposit amount must be greater than zero",
      "stack_out": [
        "depositAmount#0"
      ]
    },
    "129": {
      "op": "frame_dig -2",
      "stack_out": [
        "depositAmount#0",
        "payTxn#0 (copy)"
      ]
    },
    "131": {
      "op": "gtxns Sender",
      "defined_out": [
        "depositAmount#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0"
      ]
    },
    "133": {
      "op": "dup",
      "defined_out": [
        "depositAmount#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "134": {
      "op": "bytec_0 // \"depositors\"",
      "defined_out": [
        "\"depositors\"",
        "depositAmount#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%5#0",
        "\"depositors\""
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "\"depositors\"",
        "tmp%5#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "137": {
      "op": "dup",
      "defined_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "138": {
      "op": "box_len",
      "defined_out": [
        "depositAmount#0",
        "isDeposited#0",
        "maybe_value%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "isDeposited#0"
      ]
    },
    "139": {
      "op": "bury 1",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "isDeposited#0"
      ]
    },
    "141": {
      "op": "bz deposit_else_body@2",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "144": {
      "op": "frame_dig 2",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "146": {
      "op": "dup",
      "defined_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "147": {
      "op": "box_get",
      "defined_out": [
        "depositAmount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "149": {
      "op": "btoi",
      "defined_out": [
        "depositAmount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "150": {
      "op": "swap",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "151": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value_converted%0#0"
      ]
    },
    "152": {
      "op": "frame_dig 0",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value_converted%0#0",
        "depositAmount#0"
      ]
    },
    "154": {
      "op": "+",
      "defined_out": [
        "depositAmount#0",
        "new_box_value%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "new_box_value%0#0"
      ]
    },
    "155": {
      "op": "itob",
      "defined_out": [
        "depositAmount#0",
        "new_box_value%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "new_box_value%1#0"
      ]
    },
    "156": {
      "op": "box_put",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "157": {
      "block": "deposit_after_if_else@3",
      "stack_in": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "159": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "161": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_exists%2#0",
        "maybe_value_converted%1#0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value_converted%1#0",
        "maybe_exists%2#0"
      ]
    },
    "163": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value_converted%1#0"
      ]
    },
    "164": {
      "op": "frame_bury 0"
    },
    "166": {
      "retsub": true,
      "op": "retsub"
    },
    "167": {
      "block": "deposit_else_body@2",
      "stack_in": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "depositAmount#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "depositAmount#0"
      ]
    },
    "169": {
      "op": "itob",
      "defined_out": [
        "depositAmount#0",
        "new_box_value%2#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "new_box_value%2#0"
      ]
    },
    "170": {
      "op": "frame_dig 2",
      "defined_out": [
        "depositAmount#0",
        "new_box_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "new_box_value%2#0",
        "tmp%6#0"
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0",
        "new_box_value%2#0"
      ]
    },
    "173": {
      "op": "box_put",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "174": {
      "op": "pushbytes \"github\"",
      "defined_out": [
        "\"github\"",
        "depositAmount#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "\"github\""
      ]
    },
    "182": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"github\"",
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "\"github\"",
        "tmp%5#0"
      ]
    },
    "184": {
      "op": "concat",
      "defined_out": [
        "depositAmount#0",
        "tmp%14#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%14#0"
      ]
    },
    "185": {
      "op": "dup",
      "defined_out": [
        "depositAmount#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "186": {
      "op": "box_del",
      "defined_out": [
        "depositAmount#0",
        "tmp%14#0",
        "tmp%5#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%14#0",
        "{box_del}"
      ]
    },
    "187": {
      "op": "pop",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%14#0"
      ]
    },
    "188": {
      "op": "frame_dig -1",
      "defined_out": [
        "depositAmount#0",
        "githubHandle#0 (copy)",
        "tmp%14#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%14#0",
        "githubHandle#0 (copy)"
      ]
    },
    "190": {
      "op": "box_put",
      "stack_out": [
        "depositAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "191": {
      "op": "b deposit_after_if_else@3"
    },
    "194": {
      "subroutine": "smart_contracts/personal_bank/contract.algo.ts::PersonalBank.withdraw",
      "params": {},
      "block": "withdraw",
      "stack_in": [],
      "op": "bytec_0 // \"depositors\"",
      "defined_out": [
        "\"depositors\""
      ],
      "stack_out": [
        "\"depositors\""
      ]
    },
    "195": {
      "op": "txn Sender",
      "defined_out": [
        "\"depositors\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"depositors\"",
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "box_get",
      "defined_out": [
        "isDeposited#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "isDeposited#0"
      ]
    },
    "199": {
      "op": "swap",
      "stack_out": [
        "isDeposited#0",
        "maybe_value%0#0"
      ]
    },
    "200": {
      "op": "btoi",
      "defined_out": [
        "depositedAmount#0",
        "isDeposited#0"
      ],
      "stack_out": [
        "isDeposited#0",
        "depositedAmount#0"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "depositedAmount#0",
        "isDeposited#0"
      ]
    },
    "202": {
      "error": "No deposits found for this account",
      "op": "assert // No deposits found for this account",
      "stack_out": [
        "depositedAmount#0"
      ]
    },
    "203": {
      "op": "itxn_begin"
    },
    "204": {
      "op": "txn Sender",
      "defined_out": [
        "depositedAmount#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "depositedAmount#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "206": {
      "op": "itxn_field Receiver"
    },
    "208": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "210": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "211": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "213": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "214": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "216": {
      "op": "itxn_submit"
    },
    "217": {
      "op": "itxn Amount",
      "defined_out": [
        "result.Amount#0"
      ],
      "stack_out": [
        "result.Amount#0"
      ]
    },
    "219": {
      "op": "bytec_0 // \"depositors\"",
      "stack_out": [
        "result.Amount#0",
        "\"depositors\""
      ]
    },
    "220": {
      "op": "txn Sender",
      "defined_out": [
        "\"depositors\"",
        "result.Amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.Amount#0",
        "\"depositors\"",
        "tmp%2#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "result.Amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.Amount#0",
        "tmp%3#0"
      ]
    },
    "223": {
      "op": "intc_1 // 0",
      "stack_out": [
        "result.Amount#0",
        "tmp%3#0",
        "0"
      ]
    },
    "224": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "result.Amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.Amount#0",
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "225": {
      "op": "box_put",
      "stack_out": [
        "result.Amount#0"
      ]
    },
    "226": {
      "retsub": true,
      "op": "retsub"
    }
  }
}