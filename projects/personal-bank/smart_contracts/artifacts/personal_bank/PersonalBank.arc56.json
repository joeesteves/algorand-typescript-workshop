{
    "name": "PersonalBank",
    "structs": {},
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payTxn",
                    "desc": "- The payment transaction containing deposit information"
                },
                {
                    "type": "string",
                    "name": "githubHandle"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The total amount deposited by the sender after this transaction"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits funds into the personal bank.\nThe deposit amount is recorded in the sender's BoxMap.\nIf the sender already has a deposit, the amount is added to their existing balance.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The amount withdrawn (as UInt64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraws all funds from the sender's account.\nThis method transfers the entire balance of the sender's account back to them,\nand resets their balance to zero. The sender must have a deposit to withdraw.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "depositors": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": "ZGVwb3NpdG9ycw=="
                },
                "github": {
                    "keyType": "address",
                    "valueType": "AVMString",
                    "prefix": "Z2l0aHVi"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        151,
                        163
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        128
                    ],
                    "errorMessage": "Deposit amount must be greater than zero"
                },
                {
                    "pc": [
                        202
                    ],
                    "errorMessage": "No deposits found for this account"
                },
                {
                    "pc": [
                        54,
                        71
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        122
                    ],
                    "errorMessage": "Receiver must be the contract address"
                },
                {
                    "pc": [
                        109
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        57,
                        74
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        84
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAQAmAgpkZXBvc2l0b3JzBBUffHUxG0EASYICBNgi/+8EOjlfKzYaAI4CABMAAiNDMRkURDEYRIgAhRYpTFCwIkMxGRREMRhEMRYiCUk4ECISRDYaAVcCAIgAEhYpTFCwIkMxGUD/xzEYFEQiQ4oCAYv+OAcyChJEi/44CElEi/44AEkoTFBJvUUBQQAXiwJJvkwXTESLAAgWv4sCvkwXTESMAImLABaLAky/gAZnaXRodWKLAVBJvEiL/79C/9soMQBQvkwXTESxMQCyB7IIIrIQI7IBs7QIKDEAUCMWv4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}